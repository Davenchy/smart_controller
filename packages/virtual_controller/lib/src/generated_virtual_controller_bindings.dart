part of '../virtual_controller.dart';

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// Bindings for VirtualController
class VirtualControllerFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  VirtualControllerFFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  VirtualControllerFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int setEventType(
    int fd,
    int eventType,
  ) {
    return _setEventType(
      fd,
      eventType,
    );
  }

  late final _setEventType_ptr =
      _lookup<ffi.NativeFunction<_c_setEventType>>('setEventType');
  late final _dart_setEventType _setEventType =
      _setEventType_ptr.asFunction<_dart_setEventType>();

  int setKeyCode(
    int fd,
    int keyCode,
  ) {
    return _setKeyCode(
      fd,
      keyCode,
    );
  }

  late final _setKeyCode_ptr =
      _lookup<ffi.NativeFunction<_c_setKeyCode>>('setKeyCode');
  late final _dart_setKeyCode _setKeyCode =
      _setKeyCode_ptr.asFunction<_dart_setKeyCode>();

  int setRelCode(
    int fd,
    int relCode,
  ) {
    return _setRelCode(
      fd,
      relCode,
    );
  }

  late final _setRelCode_ptr =
      _lookup<ffi.NativeFunction<_c_setRelCode>>('setRelCode');
  late final _dart_setRelCode _setRelCode =
      _setRelCode_ptr.asFunction<_dart_setRelCode>();

  int setAbsCode(
    int fd,
    int absCode,
    int min,
    int max,
  ) {
    return _setAbsCode(
      fd,
      absCode,
      min,
      max,
    );
  }

  late final _setAbsCode_ptr =
      _lookup<ffi.NativeFunction<_c_setAbsCode>>('setAbsCode');
  late final _dart_setAbsCode _setAbsCode =
      _setAbsCode_ptr.asFunction<_dart_setAbsCode>();

  int emitEvent(
    int fd,
    int type,
    int code,
    int value,
  ) {
    return _emitEvent(
      fd,
      type,
      code,
      value,
    );
  }

  late final _emitEvent_ptr =
      _lookup<ffi.NativeFunction<_c_emitEvent>>('emitEvent');
  late final _dart_emitEvent _emitEvent =
      _emitEvent_ptr.asFunction<_dart_emitEvent>();

  int createDevice(
    int fd,
    ffi.Pointer<ffi.Int8> deviceName,
    int vendor,
    int product,
  ) {
    return _createDevice(
      fd,
      deviceName,
      vendor,
      product,
    );
  }

  late final _createDevice_ptr =
      _lookup<ffi.NativeFunction<_c_createDevice>>('createDevice');
  late final _dart_createDevice _createDevice =
      _createDevice_ptr.asFunction<_dart_createDevice>();

  int destroyDevice(
    int fd,
  ) {
    return _destroyDevice(
      fd,
    );
  }

  late final _destroyDevice_ptr =
      _lookup<ffi.NativeFunction<_c_destroyDevice>>('destroyDevice');
  late final _dart_destroyDevice _destroyDevice =
      _destroyDevice_ptr.asFunction<_dart_destroyDevice>();

  int openRequest() {
    return _openRequest();
  }

  late final _openRequest_ptr =
      _lookup<ffi.NativeFunction<_c_openRequest>>('openRequest');
  late final _dart_openRequest _openRequest =
      _openRequest_ptr.asFunction<_dart_openRequest>();

  int closeRequest(
    int fd,
  ) {
    return _closeRequest(
      fd,
    );
  }

  late final _closeRequest_ptr =
      _lookup<ffi.NativeFunction<_c_closeRequest>>('closeRequest');
  late final _dart_closeRequest _closeRequest =
      _closeRequest_ptr.asFunction<_dart_closeRequest>();
}

typedef _c_setEventType = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Uint16 eventType,
);

typedef _dart_setEventType = int Function(
  int fd,
  int eventType,
);

typedef _c_setKeyCode = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Uint16 keyCode,
);

typedef _dart_setKeyCode = int Function(
  int fd,
  int keyCode,
);

typedef _c_setRelCode = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Uint16 relCode,
);

typedef _dart_setRelCode = int Function(
  int fd,
  int relCode,
);

typedef _c_setAbsCode = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Uint16 absCode,
  ffi.Int32 min,
  ffi.Int32 max,
);

typedef _dart_setAbsCode = int Function(
  int fd,
  int absCode,
  int min,
  int max,
);

typedef _c_emitEvent = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Uint16 type,
  ffi.Uint16 code,
  ffi.Int32 value,
);

typedef _dart_emitEvent = int Function(
  int fd,
  int type,
  int code,
  int value,
);

typedef _c_createDevice = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Pointer<ffi.Int8> deviceName,
  ffi.Uint16 vendor,
  ffi.Uint16 product,
);

typedef _dart_createDevice = int Function(
  int fd,
  ffi.Pointer<ffi.Int8> deviceName,
  int vendor,
  int product,
);

typedef _c_destroyDevice = ffi.Int32 Function(
  ffi.Int32 fd,
);

typedef _dart_destroyDevice = int Function(
  int fd,
);

typedef _c_openRequest = ffi.Int32 Function();

typedef _dart_openRequest = int Function();

typedef _c_closeRequest = ffi.Int32 Function(
  ffi.Int32 fd,
);

typedef _dart_closeRequest = int Function(
  int fd,
);
