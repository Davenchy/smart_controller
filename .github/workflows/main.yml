# This is a basic workflow to help you get started with Actions

name: Flutter-Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ release ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version_name:
        description: Release version name
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        name: Setup Java
        with:
          distribution: 'adopt'
          java-version: '12.x'
      - uses: subosito/flutter-action@v1.5.3
        name: Install Flutter Engine
      - name: Support linux platform
        run: flutter config --enable-linux-desktop
      - name: Install linux desktop development additions
        run: sudo apt-get install clang cmake ninja-build pkg-config libgtk-3-dev
      - name: Flutter Doctor
        run: flutter doctor
      - name: Get pub packages
        run: flutter pub get
      - name: Build apk releases
        run: flutter build apk --release --split-per-abi
      - name: Build apk release without split
        run: flutter build apk --release
      - name: Build appbundle release
        run: flutter build appbundle --release
      - name: Build linux release
        run: |
          flutter build linux --release
          cd build/linux/x64/release
          cp bundle smart_controller -r
          tar -cf linux_release.tar smart_controller
      - name: Publish Releases
        uses: ncipollo/release-action@v1
        with:
          name: ${{ github.event.inputs.version_name }}
          tag: ${{ github.event.inputs.version_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: 'build/linux/x64/release/linux_release.tar,build/app/outputs/apk/release/*.apk,build/app/outputs/bundle/release/*.aab'
